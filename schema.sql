-- WebduhVercel Database Schema
-- PostgreSQL Schema for the Ultimate v0.dev Competitor Platform
-- Created: 2024-02-06
-- Updated: 2024-02-06 - Added File Management & Enhanced AI Builder Integration

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";

-- ============================================================================
-- CORE TABLES
-- ============================================================================

-- Users Table
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email VARCHAR(255) UNIQUE NOT NULL,
    username VARCHAR(50) UNIQUE NOT NULL,
    full_name VARCHAR(255),
    avatar_url TEXT,
    bio TEXT,
    github_username VARCHAR(255),
    twitter_username VARCHAR(255),
    website_url TEXT,
    password_hash VARCHAR(255) NOT NULL,
    email_verified BOOLEAN DEFAULT FALSE,
    two_factor_enabled BOOLEAN DEFAULT FALSE,
    two_factor_secret VARCHAR(255),
    last_login_at TIMESTAMPTZ,
    preferences JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Teams Table
CREATE TABLE teams (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255) NOT NULL,
    slug VARCHAR(100) UNIQUE NOT NULL,
    description TEXT,
    avatar_url TEXT,
    website_url TEXT,
    plan VARCHAR(50) DEFAULT 'free', -- free, pro, team, enterprise
    billing_email VARCHAR(255),
    settings JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Team Members Table
CREATE TABLE team_members (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    team_id UUID NOT NULL REFERENCES teams(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    role VARCHAR(50) DEFAULT 'member', -- owner, admin, member, viewer
    permissions JSONB DEFAULT '{}',
    invited_by UUID REFERENCES users(id),
    joined_at TIMESTAMPTZ DEFAULT NOW(),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(team_id, user_id)
);

-- ============================================================================
-- PROJECT MANAGEMENT
-- ============================================================================

-- Projects Table
CREATE TABLE projects (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255) NOT NULL,
    slug VARCHAR(100) NOT NULL,
    description TEXT,
    framework VARCHAR(50), -- nextjs, react, vue, svelte, static, etc.
    repository_url TEXT,
    root_directory VARCHAR(255) DEFAULT '/',
    build_command TEXT,
    output_directory VARCHAR(255),
    install_command TEXT,
    dev_command TEXT,
    team_id UUID NOT NULL REFERENCES teams(id) ON DELETE CASCADE,
    created_by UUID NOT NULL REFERENCES users(id),
    status VARCHAR(50) DEFAULT 'active', -- active, paused, archived
    source_type VARCHAR(50) DEFAULT 'git', -- git, ai-builder, manual, import
    ai_builder_session_id UUID, -- Reference to AI Builder session that created this project
    file_structure JSONB DEFAULT '{}', -- Cached file structure for quick access
    last_sync_at TIMESTAMPTZ, -- Last time files were synced
    settings JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(team_id, slug)
);

-- Project Files Table
CREATE TABLE project_files (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    file_path TEXT NOT NULL, -- Relative path from project root
    file_name VARCHAR(255) NOT NULL,
    file_type VARCHAR(50), -- js, ts, tsx, jsx, css, scss, md, json, etc.
    content TEXT, -- File content (for text files)
    content_hash VARCHAR(64), -- SHA-256 hash for change detection
    file_size BIGINT DEFAULT 0, -- File size in bytes
    encoding VARCHAR(20) DEFAULT 'utf8', -- utf8, base64, binary
    is_binary BOOLEAN DEFAULT FALSE,
    mime_type VARCHAR(255),
    parent_directory VARCHAR(1000), -- Parent directory path
    created_by UUID NOT NULL REFERENCES users(id),
    last_modified_by UUID REFERENCES users(id),
    ai_generated BOOLEAN DEFAULT FALSE, -- Whether this file was generated by AI
    ai_builder_session_id UUID, -- Session that generated this file
    version INTEGER DEFAULT 1,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(project_id, file_path)
);

-- Project File Versions Table (for version control)
CREATE TABLE project_file_versions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    file_id UUID NOT NULL REFERENCES project_files(id) ON DELETE CASCADE,
    version_number INTEGER NOT NULL,
    content TEXT,
    content_hash VARCHAR(64),
    change_description TEXT,
    created_by UUID NOT NULL REFERENCES users(id),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(file_id, version_number)
);

-- Project Templates Table
CREATE TABLE project_templates (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    framework VARCHAR(50) NOT NULL,
    category VARCHAR(100), -- frontend, fullstack, api, static, etc.
    tags TEXT[] DEFAULT '{}',
    thumbnail_url TEXT,
    demo_url TEXT,
    repository_url TEXT,
    template_files JSONB NOT NULL, -- Complete file structure and content
    build_config JSONB DEFAULT '{}', -- Build commands, dependencies, etc.
    is_official BOOLEAN DEFAULT FALSE,
    is_public BOOLEAN DEFAULT TRUE,
    download_count INTEGER DEFAULT 0,
    created_by UUID NOT NULL REFERENCES users(id),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Environment Variables Table
CREATE TABLE environment_variables (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    key VARCHAR(255) NOT NULL,
    value TEXT NOT NULL,
    target VARCHAR(50) DEFAULT 'all', -- all, production, preview, development
    encrypted BOOLEAN DEFAULT TRUE,
    created_by UUID NOT NULL REFERENCES users(id),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(project_id, key, target)
);

-- Git Integrations Table
CREATE TABLE git_integrations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    provider VARCHAR(50) NOT NULL, -- github, gitlab, bitbucket
    repository_id VARCHAR(255) NOT NULL,
    repository_name VARCHAR(255) NOT NULL,
    branch VARCHAR(255) DEFAULT 'main',
    installation_id VARCHAR(255),
    access_token_encrypted TEXT,
    webhook_id VARCHAR(255),
    auto_deploy BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- ============================================================================
-- DEPLOYMENTS
-- ============================================================================

-- Deployments Table
CREATE TABLE deployments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    name VARCHAR(255),
    url TEXT,
    status VARCHAR(50) DEFAULT 'pending', -- pending, building, ready, error, canceled
    type VARCHAR(50) DEFAULT 'preview', -- production, preview
    source VARCHAR(50) DEFAULT 'git', -- git, cli, api, ai-builder, bolt-diy, manual
    commit_sha VARCHAR(255),
    commit_message TEXT,
    branch VARCHAR(255),
    creator_id UUID REFERENCES users(id),
    build_logs TEXT,
    build_time_ms INTEGER,
    size_bytes BIGINT,
    functions_count INTEGER DEFAULT 0,
    edge_functions_count INTEGER DEFAULT 0,
    regions TEXT[] DEFAULT '{}',
    error_message TEXT,
    deployment_config JSONB DEFAULT '{}', -- Build settings, env vars, etc.
    file_snapshot JSONB, -- Snapshot of files at deployment time
    meta JSONB DEFAULT '{}',
    ready_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Deployment Checks Table
CREATE TABLE deployment_checks (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    deployment_id UUID NOT NULL REFERENCES deployments(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    status VARCHAR(50) DEFAULT 'pending', -- pending, running, success, failure, skipped
    conclusion VARCHAR(50), -- success, failure, neutral, cancelled, skipped, timed_out
    started_at TIMESTAMPTZ,
    completed_at TIMESTAMPTZ,
    details_url TEXT,
    output JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- ============================================================================
-- DOMAINS & CERTIFICATES
-- ============================================================================

-- Domains Table
CREATE TABLE domains (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255) UNIQUE NOT NULL,
    project_id UUID REFERENCES projects(id) ON DELETE CASCADE,
    team_id UUID NOT NULL REFERENCES teams(id) ON DELETE CASCADE,
    verification_status VARCHAR(50) DEFAULT 'pending', -- pending, verified, failed
    ssl_status VARCHAR(50) DEFAULT 'pending', -- pending, provisioned, failed, renewing
    ssl_expires_at TIMESTAMPTZ,
    cdn_enabled BOOLEAN DEFAULT TRUE,
    redirect_to VARCHAR(255),
    created_by UUID NOT NULL REFERENCES users(id),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- DNS Records Table
CREATE TABLE dns_records (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    domain_id UUID NOT NULL REFERENCES domains(id) ON DELETE CASCADE,
    type VARCHAR(10) NOT NULL, -- A, AAAA, CNAME, MX, TXT, etc.
    name VARCHAR(255) NOT NULL,
    value TEXT NOT NULL,
    ttl INTEGER DEFAULT 300,
    priority INTEGER,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- ============================================================================
-- AI BUILDER & BOLT.DIY INTEGRATION
-- ============================================================================

-- AI Builder Sessions Table
CREATE TABLE ai_builder_sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    project_id UUID REFERENCES projects(id) ON DELETE SET NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    status VARCHAR(50) DEFAULT 'active', -- active, completed, archived, synced
    llm_provider VARCHAR(50) NOT NULL, -- openai, anthropic, groq, ollama, perplexity
    llm_model VARCHAR(100) NOT NULL,
    context_data JSONB DEFAULT '{}',
    generated_files JSONB DEFAULT '{}', -- Files generated in this session
    file_structure JSONB DEFAULT '{}', -- Current file structure
    iterations_count INTEGER DEFAULT 0,
    total_tokens_used INTEGER DEFAULT 0,
    last_exported_at TIMESTAMPTZ, -- When files were last exported to project
    export_status VARCHAR(50) DEFAULT 'pending', -- pending, exported, failed
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- AI Builder Messages Table
CREATE TABLE ai_builder_messages (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id UUID NOT NULL REFERENCES ai_builder_sessions(id) ON DELETE CASCADE,
    role VARCHAR(50) NOT NULL, -- user, assistant, system
    content TEXT NOT NULL,
    files_attached JSONB DEFAULT '{}', -- Files attached to this message
    metadata JSONB DEFAULT '{}',
    tokens_used INTEGER DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- AI Builder File Operations Table
CREATE TABLE ai_builder_file_operations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id UUID NOT NULL REFERENCES ai_builder_sessions(id) ON DELETE CASCADE,
    message_id UUID REFERENCES ai_builder_messages(id) ON DELETE CASCADE,
    operation_type VARCHAR(50) NOT NULL, -- create, update, delete, rename, move
    file_path TEXT NOT NULL,
    old_file_path TEXT, -- For rename/move operations
    file_content TEXT,
    content_diff TEXT, -- Diff for update operations
    operation_metadata JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Bolt.DIY Integrations Table
CREATE TABLE bolt_diy_integrations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    project_id UUID REFERENCES projects(id) ON DELETE CASCADE,
    ai_builder_session_id UUID REFERENCES ai_builder_sessions(id) ON DELETE CASCADE,
    bolt_project_id VARCHAR(255) NOT NULL,
    bolt_project_url TEXT,
    sync_status VARCHAR(50) DEFAULT 'pending', -- pending, synced, failed
    sync_direction VARCHAR(50) DEFAULT 'both', -- to_dashboard, to_bolt, both
    last_sync_at TIMESTAMPTZ,
    sync_conflicts JSONB DEFAULT '{}', -- Any sync conflicts
    configuration JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Project Sync History Table
CREATE TABLE project_sync_history (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    sync_type VARCHAR(50) NOT NULL, -- ai_builder_import, git_sync, manual_upload, api_sync
    source_reference VARCHAR(255), -- AI Builder session ID, commit SHA, etc.
    files_changed INTEGER DEFAULT 0,
    files_added INTEGER DEFAULT 0,
    files_deleted INTEGER DEFAULT 0,
    sync_summary JSONB DEFAULT '{}', -- Summary of changes
    initiated_by UUID NOT NULL REFERENCES users(id),
    completed_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- ============================================================================
-- ANALYTICS & MONITORING
-- ============================================================================

-- Analytics Events Table
CREATE TABLE analytics_events (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID REFERENCES projects(id) ON DELETE CASCADE,
    deployment_id UUID REFERENCES deployments(id) ON DELETE CASCADE,
    event_type VARCHAR(100) NOT NULL, -- page_view, api_call, error, etc.
    path VARCHAR(1000),
    user_agent TEXT,
    ip_address INET,
    country VARCHAR(2),
    city VARCHAR(255),
    referer TEXT,
    duration_ms INTEGER,
    status_code INTEGER,
    user_id UUID REFERENCES users(id),
    session_id VARCHAR(255),
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Performance Metrics Table
CREATE TABLE performance_metrics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    deployment_id UUID REFERENCES deployments(id) ON DELETE CASCADE,
    metric_type VARCHAR(100) NOT NULL, -- response_time, error_rate, throughput, etc.
    value DECIMAL(10,2) NOT NULL,
    unit VARCHAR(20) NOT NULL, -- ms, percentage, count, etc.
    region VARCHAR(50),
    timestamp TIMESTAMPTZ DEFAULT NOW(),
    metadata JSONB DEFAULT '{}'
);

-- Status Page Incidents Table
CREATE TABLE status_incidents (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title VARCHAR(255) NOT NULL,
    description TEXT,
    status VARCHAR(50) DEFAULT 'investigating', -- investigating, identified, monitoring, resolved
    severity VARCHAR(50) DEFAULT 'minor', -- minor, major, critical
    affected_services TEXT[] DEFAULT '{}',
    created_by UUID NOT NULL REFERENCES users(id),
    resolved_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- ============================================================================
-- WEBHOOKS & INTEGRATIONS
-- ============================================================================

-- Webhooks Table
CREATE TABLE webhooks (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID REFERENCES projects(id) ON DELETE CASCADE,
    team_id UUID NOT NULL REFERENCES teams(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    url TEXT NOT NULL,
    events TEXT[] NOT NULL DEFAULT '{}', -- deployment.created, deployment.ready, etc.
    secret VARCHAR(255),
    active BOOLEAN DEFAULT TRUE,
    delivery_attempts INTEGER DEFAULT 0,
    last_delivery_at TIMESTAMPTZ,
    last_response_status INTEGER,
    created_by UUID NOT NULL REFERENCES users(id),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Webhook Deliveries Table
CREATE TABLE webhook_deliveries (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    webhook_id UUID NOT NULL REFERENCES webhooks(id) ON DELETE CASCADE,
    event_type VARCHAR(100) NOT NULL,
    payload JSONB NOT NULL,
    response_status INTEGER,
    response_body TEXT,
    response_headers JSONB DEFAULT '{}',
    delivered_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- ============================================================================
-- BILLING & USAGE
-- ============================================================================

-- Billing Subscriptions Table
CREATE TABLE billing_subscriptions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    team_id UUID NOT NULL REFERENCES teams(id) ON DELETE CASCADE,
    stripe_subscription_id VARCHAR(255) UNIQUE,
    stripe_customer_id VARCHAR(255),
    plan VARCHAR(50) NOT NULL, -- free, pro, team, enterprise
    status VARCHAR(50) DEFAULT 'active', -- active, canceled, past_due, incomplete
    current_period_start TIMESTAMPTZ,
    current_period_end TIMESTAMPTZ,
    cancel_at_period_end BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Usage Tracking Table
CREATE TABLE usage_tracking (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    team_id UUID NOT NULL REFERENCES teams(id) ON DELETE CASCADE,
    project_id UUID REFERENCES projects(id) ON DELETE CASCADE,
    metric VARCHAR(100) NOT NULL, -- bandwidth, function_invocations, build_minutes, etc.
    value BIGINT NOT NULL,
    period_start TIMESTAMPTZ NOT NULL,
    period_end TIMESTAMPTZ NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- ============================================================================
-- INDEXES FOR PERFORMANCE
-- ============================================================================

-- Users
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_username ON users(username);
CREATE INDEX idx_users_github_username ON users(github_username);

-- Teams
CREATE INDEX idx_teams_slug ON teams(slug);

-- Projects
CREATE INDEX idx_projects_team_id ON projects(team_id);
CREATE INDEX idx_projects_slug ON projects(slug);
CREATE INDEX idx_projects_created_by ON projects(created_by);
CREATE INDEX idx_projects_source_type ON projects(source_type);
CREATE INDEX idx_projects_ai_builder_session_id ON projects(ai_builder_session_id);

-- Project Files
CREATE INDEX idx_project_files_project_id ON project_files(project_id);
CREATE INDEX idx_project_files_file_path ON project_files(file_path);
CREATE INDEX idx_project_files_file_type ON project_files(file_type);
CREATE INDEX idx_project_files_parent_directory ON project_files(parent_directory);
CREATE INDEX idx_project_files_content_hash ON project_files(content_hash);
CREATE INDEX idx_project_files_ai_generated ON project_files(ai_generated);

-- Project File Versions
CREATE INDEX idx_project_file_versions_file_id ON project_file_versions(file_id);
CREATE INDEX idx_project_file_versions_version_number ON project_file_versions(version_number);

-- Project Templates
CREATE INDEX idx_project_templates_framework ON project_templates(framework);
CREATE INDEX idx_project_templates_category ON project_templates(category);
CREATE INDEX idx_project_templates_is_public ON project_templates(is_public);
CREATE INDEX idx_project_templates_created_by ON project_templates(created_by);

-- Deployments
CREATE INDEX idx_deployments_project_id ON deployments(project_id);
CREATE INDEX idx_deployments_status ON deployments(status);
CREATE INDEX idx_deployments_created_at ON deployments(created_at);
CREATE INDEX idx_deployments_commit_sha ON deployments(commit_sha);
CREATE INDEX idx_deployments_source ON deployments(source);

-- Analytics
CREATE INDEX idx_analytics_events_project_id ON analytics_events(project_id);
CREATE INDEX idx_analytics_events_created_at ON analytics_events(created_at);
CREATE INDEX idx_analytics_events_event_type ON analytics_events(event_type);

-- Performance
CREATE INDEX idx_performance_metrics_project_id ON performance_metrics(project_id);
CREATE INDEX idx_performance_metrics_timestamp ON performance_metrics(timestamp);
CREATE INDEX idx_performance_metrics_metric_type ON performance_metrics(metric_type);

-- Webhooks
CREATE INDEX idx_webhooks_team_id ON webhooks(team_id);
CREATE INDEX idx_webhook_deliveries_webhook_id ON webhook_deliveries(webhook_id);

-- AI Builder
CREATE INDEX idx_ai_builder_sessions_user_id ON ai_builder_sessions(user_id);
CREATE INDEX idx_ai_builder_sessions_project_id ON ai_builder_sessions(project_id);
CREATE INDEX idx_ai_builder_sessions_status ON ai_builder_sessions(status);
CREATE INDEX idx_ai_builder_messages_session_id ON ai_builder_messages(session_id);
CREATE INDEX idx_ai_builder_file_operations_session_id ON ai_builder_file_operations(session_id);

-- Bolt.DIY Integrations
CREATE INDEX idx_bolt_diy_integrations_user_id ON bolt_diy_integrations(user_id);
CREATE INDEX idx_bolt_diy_integrations_project_id ON bolt_diy_integrations(project_id);
CREATE INDEX idx_bolt_diy_integrations_ai_builder_session_id ON bolt_diy_integrations(ai_builder_session_id);

-- Project Sync History
CREATE INDEX idx_project_sync_history_project_id ON project_sync_history(project_id);
CREATE INDEX idx_project_sync_history_sync_type ON project_sync_history(sync_type);
CREATE INDEX idx_project_sync_history_created_at ON project_sync_history(created_at);

-- ============================================================================
-- TRIGGERS FOR UPDATED_AT TIMESTAMPS
-- ============================================================================

CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_teams_updated_at BEFORE UPDATE ON teams FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_projects_updated_at BEFORE UPDATE ON projects FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_project_files_updated_at BEFORE UPDATE ON project_files FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_project_templates_updated_at BEFORE UPDATE ON project_templates FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_deployments_updated_at BEFORE UPDATE ON deployments FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_domains_updated_at BEFORE UPDATE ON domains FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_webhooks_updated_at BEFORE UPDATE ON webhooks FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_ai_builder_sessions_updated_at BEFORE UPDATE ON ai_builder_sessions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_bolt_diy_integrations_updated_at BEFORE UPDATE ON bolt_diy_integrations FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ============================================================================
-- VIEWS FOR COMMON QUERIES
-- ============================================================================

-- Project Overview View
CREATE VIEW project_overview AS
SELECT 
    p.id,
    p.name,
    p.slug,
    p.description,
    p.framework,
    p.status,
    p.source_type,
    p.team_id,
    t.name as team_name,
    p.created_by,
    u.username as creator_username,
    p.created_at,
    p.updated_at,
    (SELECT COUNT(*) FROM project_files pf WHERE pf.project_id = p.id) as file_count,
    (SELECT COUNT(*) FROM deployments d WHERE d.project_id = p.id) as deployment_count,
    (SELECT MAX(d.created_at) FROM deployments d WHERE d.project_id = p.id AND d.status = 'ready') as last_deployment_at
FROM projects p
JOIN teams t ON p.team_id = t.id
JOIN users u ON p.created_by = u.id;

-- AI Builder Session Overview View
CREATE VIEW ai_builder_session_overview AS
SELECT 
    s.id,
    s.title,
    s.description,
    s.status,
    s.llm_provider,
    s.llm_model,
    s.user_id,
    u.username,
    s.project_id,
    p.name as project_name,
    s.iterations_count,
    s.total_tokens_used,
    s.export_status,
    s.created_at,
    s.updated_at,
    (SELECT COUNT(*) FROM ai_builder_messages m WHERE m.session_id = s.id) as message_count,
    (SELECT COUNT(*) FROM ai_builder_file_operations fo WHERE fo.session_id = s.id) as file_operation_count
FROM ai_builder_sessions s
JOIN users u ON s.user_id = u.id
LEFT JOIN projects p ON s.project_id = p.id;

-- ============================================================================
-- SCHEMA VERSION TRACKING
-- ============================================================================

CREATE TABLE schema_version (
    version INTEGER PRIMARY KEY,
    description TEXT,
    applied_at TIMESTAMPTZ DEFAULT NOW()
);

INSERT INTO schema_version (version, description) VALUES 
    (1, 'Initial schema with enhanced AI Builder integration and file management');

-- Add the missing foreign key constraint for projects.ai_builder_session_id
ALTER TABLE projects ADD CONSTRAINT fk_projects_ai_builder_session 
    FOREIGN KEY (ai_builder_session_id) REFERENCES ai_builder_sessions(id) ON DELETE SET NULL; 